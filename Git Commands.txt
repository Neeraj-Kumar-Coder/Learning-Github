										GIT COMMANDS / NOTES

To make the current directory a git repository: git init

To check status: git status

To change the working directory: cd "<path>"
Example: cd "/c/Neeraj Kumar/Learning Git/First Git Repository/"

To add all files to staging area: git add .
or
To add all files to staging area: git add --a

To create a new file: touch <name.extension>

To add a specific file to staging area: git add <name.extension>

To commit: git commit -m "<message>"

To check all the things happened in the git repository: git log

To clone a git repository from web: git clone <link> <(optional) enter the name you want to give>

To ignore a file for tracking, first create a ".gitignore" file and then add the name(with extension) of the file to be ignored in the gitignore file: touch .gitignore
also
To ignore a specific extension files: add *.extension to the .gitignore file to ignore all the files having a specific extension

To ignore the contents of a directory (folder): add '<directory_name>/' to the .gitignore file
Note: The above command will ignore all the folders with the given name

To ignore the content of the outer directory: add '/<directory_name>/' to the .gitignore file
Note: The above command will ignore only the outer directory with this name

To compare files between "working directory" and "Staging area": git diff

To compare files between "staging area" and "previous commit": git diff --staged

To skip staging area and make a direct commit: git commit -a -m "<comment>"
Note: This will not add the untracked file to the commit

To remove or rename any file in the working directory using git;
Note: We can do it in normal way but if we use git bash to do the same then git will automatically add the change to the staging area
To remove: git rm <name.extension>
To rename: git mv <oldname.extension> <newname.extension>

To untrack a file from git: git rm --cached <name.extension>
Note: Even if we add the name of the file in the .gitignore file then also we have to explicitly remove the file from tracking because we were tracking the file earlier and it is still in the tracking of the git

To see only the commits made: git log
To see the changes made: git log -p
To see specific number (n) of commits along with there diff: git log -p -n
To see a short summary of commits: git log --stat
To see all the commits in oneline in pretty form: git log --pretty=oneline
To see a very short detail of commits: git log --pretty=short
To see author, commit and message also: git log --pretty=full
To see last n days/weeks/months/years commits: git log --since=n.days (or) n.weeks (or) n.months (or) n.years
To see list of logs with the user defined format: git log --pretty=format:"%h -- %an"
Note: here %h is hash commit and %an is author name, we can see more such in the git scm website

To add the current commit to the previous one: git commit --amend
Note: This will open the "vim" editor.
To edit press 'i'
To exit press 'Esc' then ':' then 'w' then 'q' the press enter

To unstage a file: git restore --staged <name.extension>
To revert back a specific file to previous commit: git checkout -- <name.extension>
To revert back all the files in the repository to the previous commit: git checkout -f

To create an Alias (a shortcut for a long command): git config --global alias.<shortcut> '<command>'
E.G.: git config --global alias.unstage 'restore --staged --'
(This is to unstage any staged file)

To create a new branch and switch to it: git checkout -b <new_branch_name>
To switch to other branches: git checkout <branch_name>
To merge any branch to the current branch: git merge <branch_name>
To check all the branches: git branch
To check last commit of all the branches: git branch -v
To check the branches which are already merged: git branch --merged
To check the branches that are not merged yet: git branch --no-merged
To delete a branch: git branch -d <branch_name>
Note: It will give an error message if the branch is not merged

To push new branch to remote: git push -u <name_of_link> <name_of_branch>
Note: You should be on that branch which you want to push
To create a new branch in the remote: git push -u <name_of_link> <name_of_branch>:<renamed_branch_name>

To clean / delete the git repository: rm -rf .git